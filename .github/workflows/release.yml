name: Release

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Semantic release name (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate release name format
        run: |
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          if [[ ! "$RELEASE_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Release name must follow semantic versioning format (v1.0.0)"
            echo "Provided: $RELEASE_NAME"
            exit 1
          fi
          echo "Release name validation passed: $RELEASE_NAME"

      - name: Check if tag already exists
        run: |
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          if git rev-parse "$RELEASE_NAME" >/dev/null 2>&1; then
            echo "Error: Tag $RELEASE_NAME already exists"
            exit 1
          fi
          echo "Tag $RELEASE_NAME does not exist, proceeding with creation"

  test:
    needs: prepare
    uses: ./.github/workflows/test.yml

  release:
    needs: [prepare, test]
    runs-on: ubuntu-latest
    environment: prod  # Run in prod environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        run: |
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$RELEASE_NAME" -m "Release $RELEASE_NAME"
          git push origin "$RELEASE_NAME"
          echo "Successfully created and pushed tag: $RELEASE_NAME"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          name: Release ${{ github.event.inputs.release_name }}
          generate_release_notes: true
          body: |
            ## Changes
            See the [commits](https://github.com/${{ github.repository }}/commits/${{ github.event.inputs.release_name }}) for details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract version components
        id: version
        run: |
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          echo "full_version=$RELEASE_NAME" >> $GITHUB_OUTPUT

          # Extract major version (v1)
          MAJOR_VERSION=$(echo "$RELEASE_NAME" | cut -d'.' -f1)
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT

          # Extract major.minor version (v1.2)
          MAJOR_MINOR_VERSION=$(echo "$RELEASE_NAME" | cut -d'.' -f1,2)
          echo "major_minor_version=$MAJOR_MINOR_VERSION" >> $GITHUB_OUTPUT

          echo "Extracted versions:"
          echo "  Full: $RELEASE_NAME"
          echo "  Major: $MAJOR_VERSION"
          echo "  Major.Minor: $MAJOR_MINOR_VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USER }}/video-in-be-stub:${{ steps.version.outputs.full_version }}
            ${{ secrets.DOCKER_USER }}/video-in-be-stub:${{ steps.version.outputs.major_version }}
            ${{ secrets.DOCKER_USER }}/video-in-be-stub:${{ steps.version.outputs.major_minor_version }}
            ${{ secrets.DOCKER_USER }}/video-in-be-stub:latest
          build-args: |
            VERSION=${{ steps.version.outputs.full_version }}

      - name: Release summary
        run: |
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
          MAJOR_VERSION="${{ steps.version.outputs.major_version }}"
          MAJOR_MINOR_VERSION="${{ steps.version.outputs.major_minor_version }}"
          REPO="${{ github.repository }}"
          GH_RELEASE_URL="https://github.com/$REPO/releases/tag/$RELEASE_NAME"
          DOCKER_IMAGE="${{ secrets.DOCKER_USER }}/video-in-be-stub:$RELEASE_NAME"
          DOCKER_IMAGE_URL="https://hub.docker.com/r/${{ secrets.DOCKER_USER }}/video-in-be-stub/tags?page=1&name=$RELEASE_NAME"

          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Release tag **$RELEASE_NAME** has been successfully created." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release]($GH_RELEASE_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image: \`$DOCKER_IMAGE\` ([View on Docker Hub]($DOCKER_IMAGE_URL))" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Tags Created:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_USER }}/video-in-be-stub:$RELEASE_NAME\` (full version)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_USER }}/video-in-be-stub:$MAJOR_VERSION\` (major version)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_USER }}/video-in-be-stub:$MAJOR_MINOR_VERSION\` (major.minor version)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_USER }}/video-in-be-stub:latest\` (latest)" >> $GITHUB_STEP_SUMMARY
